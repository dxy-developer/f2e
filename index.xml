<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>丁香园前端小分队</title>
    <link>http://dxy-developer.github.io/f2e/</link>
    <description>Recent content on 丁香园前端小分队</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Establishment · 丁香园前端</copyright>
    <lastBuildDate>Mon, 22 Feb 2016 17:18:13 +0800</lastBuildDate>
    <atom:link href="http://dxy-developer.github.io/f2e/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Web 前端技术栈</title>
      <link>http://dxy-developer.github.io/f2e/post/tech-stack/</link>
      <pubDate>Mon, 22 Feb 2016 17:18:13 +0800</pubDate>
      
      <guid>http://dxy-developer.github.io/f2e/post/tech-stack/</guid>
      <description>

&lt;h3 id=&#34;标题:d52b76c9c6c9729538c3e898300f4780&#34;&gt;标题&lt;/h3&gt;

&lt;p&gt;简单 Demo 示例说明。山顶的朋友好~~~&lt;/p&gt;

&lt;h1 id=&#34;欢迎使用-cmd-markdown-编辑阅读器:d52b76c9c6c9729538c3e898300f4780&#34;&gt;欢迎使用 Cmd Markdown 编辑阅读器&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，&lt;strong&gt;Cmd Markdown&lt;/strong&gt; 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;整理知识，学习笔记&lt;/li&gt;
&lt;li&gt;发布日记，杂文，所见所想&lt;/li&gt;
&lt;li&gt;撰写发布技术文稿（代码支持）&lt;/li&gt;
&lt;li&gt;撰写发布学术论文（LaTeX 公式支持）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/logo.png&#34; alt=&#34;cmd-markdown-logo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：&lt;/p&gt;

&lt;h3 id=&#34;windows-mac-linux-全平台客户端-https-www-zybuluo-com-cmd:d52b76c9c6c9729538c3e898300f4780&#34;&gt;&lt;a href=&#34;https://www.zybuluo.com/cmd/&#34;&gt;Windows/Mac/Linux 全平台客户端&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 &lt;i class=&#34;icon-file&#34;&gt;&lt;/i&gt; &lt;strong&gt;新文稿&lt;/strong&gt; 或者使用快捷键 &lt;code&gt;Ctrl+Alt+N&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;什么是-markdown:d52b76c9c6c9729538c3e898300f4780&#34;&gt;什么是 Markdown&lt;/h2&gt;

&lt;p&gt;Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，&lt;strong&gt;粗体&lt;/strong&gt; 或者 &lt;em&gt;斜体&lt;/em&gt; 某些文字，更棒的是，它还可以&lt;/p&gt;

&lt;h3 id=&#34;1-制作一份待办事宜-todo-列表-https-www-zybuluo-com-mdeditor-url-https-www-zybuluo-com-static-editor-md-help-markdown-13-待办事宜-todo-列表:d52b76c9c6c9729538c3e898300f4780&#34;&gt;1. 制作一份待办事宜 &lt;a href=&#34;https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表&#34;&gt;Todo 列表&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;[ ] 支持以 PDF 格式导出文稿&lt;/li&gt;
&lt;li&gt;[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率&lt;/li&gt;
&lt;li&gt;[x] 新增 Todo 列表功能&lt;/li&gt;
&lt;li&gt;[x] 修复 LaTex 公式渲染问题&lt;/li&gt;
&lt;li&gt;[x] 新增 LaTex 公式编号功能&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-书写一个质能守恒公式-latex:d52b76c9c6c9729538c3e898300f4780&#34;&gt;2. 书写一个质能守恒公式&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d52b76c9c6c9729538c3e898300f4780:LaTeX&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d52b76c9c6c9729538c3e898300f4780:LaTeX&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;$$E=mc^2$$&lt;/p&gt;

&lt;h3 id=&#34;3-高亮一段代码-code:d52b76c9c6c9729538c3e898300f4780&#34;&gt;3. 高亮一段代码&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d52b76c9c6c9729538c3e898300f4780:code&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d52b76c9c6c9729538c3e898300f4780:code&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@requires_authorization
class SomeClass:
    pass

if __name__ == &#39;__main__&#39;:
    # A comment
    print &#39;hello world&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-高效绘制-流程图-https-www-zybuluo-com-mdeditor-url-https-www-zybuluo-com-static-editor-md-help-markdown-7-流程图:d52b76c9c6c9729538c3e898300f4780&#34;&gt;4. 高效绘制 &lt;a href=&#34;https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图&#34;&gt;流程图&lt;/a&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-flow&#34;&gt;st=&amp;gt;start: Start
op=&amp;gt;operation: Your Operation
cond=&amp;gt;condition: Yes or No?
e=&amp;gt;end

st-&amp;gt;op-&amp;gt;cond
cond(yes)-&amp;gt;e
cond(no)-&amp;gt;op
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-高效绘制-序列图-https-www-zybuluo-com-mdeditor-url-https-www-zybuluo-com-static-editor-md-help-markdown-8-序列图:d52b76c9c6c9729538c3e898300f4780&#34;&gt;5. 高效绘制 &lt;a href=&#34;https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图&#34;&gt;序列图&lt;/a&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-seq&#34;&gt;Alice-&amp;gt;Bob: Hello Bob, how are you?
Note right of Bob: Bob thinks
Bob--&amp;gt;Alice: I am good thanks!
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;6-绘制表格:d52b76c9c6c9729538c3e898300f4780&#34;&gt;6. 绘制表格&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;价格&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;计算机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1600&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;手机&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;管线&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;\$1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;234&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;7-更详细语法说明:d52b76c9c6c9729538c3e898300f4780&#34;&gt;7. 更详细语法说明&lt;/h3&gt;

&lt;p&gt;想要查看更详细的语法说明，可以参考我们准备的 &lt;a href=&#34;https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown&#34;&gt;Cmd Markdown 简明语法手册&lt;/a&gt;，进阶用户可以参考 &lt;a href=&#34;https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册&#34;&gt;Cmd Markdown 高阶语法手册&lt;/a&gt; 了解更多高级功能。&lt;/p&gt;

&lt;p&gt;总而言之，不同于其它 &lt;em&gt;所见即所得&lt;/em&gt; 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。&lt;strong&gt;Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。&lt;/strong&gt; 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;什么是-cmd-markdown:d52b76c9c6c9729538c3e898300f4780&#34;&gt;什么是 Cmd Markdown&lt;/h2&gt;

&lt;p&gt;您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 &lt;strong&gt;编辑/发布/阅读&lt;/strong&gt; Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。&lt;/p&gt;

&lt;h3 id=&#34;1-实时同步预览:d52b76c9c6c9729538c3e898300f4780&#34;&gt;1. 实时同步预览&lt;/h3&gt;

&lt;p&gt;我们将 Cmd Markdown 的主界面一分为二，左边为&lt;strong&gt;编辑区&lt;/strong&gt;，右边为&lt;strong&gt;预览区&lt;/strong&gt;，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！&lt;/p&gt;

&lt;h3 id=&#34;2-编辑工具栏:d52b76c9c6c9729538c3e898300f4780&#34;&gt;2. 编辑工具栏&lt;/h3&gt;

&lt;p&gt;也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 &lt;strong&gt;编辑区&lt;/strong&gt; 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/toolbar-editor.png&#34; alt=&#34;tool-editor&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-编辑模式:d52b76c9c6c9729538c3e898300f4780&#34;&gt;3. 编辑模式&lt;/h3&gt;

&lt;p&gt;完全心无旁骛的方式编辑文字：点击 &lt;strong&gt;编辑工具栏&lt;/strong&gt; 最右测的拉伸按钮或者按下 &lt;code&gt;Ctrl + M&lt;/code&gt;，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！&lt;/p&gt;

&lt;h3 id=&#34;4-实时的云端文稿:d52b76c9c6c9729538c3e898300f4780&#34;&gt;4. 实时的云端文稿&lt;/h3&gt;

&lt;p&gt;为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 &lt;strong&gt;编辑工具栏&lt;/strong&gt; 的最右侧提示 &lt;code&gt;已保存&lt;/code&gt; 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。&lt;/p&gt;

&lt;h3 id=&#34;5-离线模式:d52b76c9c6c9729538c3e898300f4780&#34;&gt;5. 离线模式&lt;/h3&gt;

&lt;p&gt;在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。&lt;/p&gt;

&lt;h3 id=&#34;6-管理工具栏:d52b76c9c6c9729538c3e898300f4780&#34;&gt;6. 管理工具栏&lt;/h3&gt;

&lt;p&gt;为了便于管理您的文稿，在 &lt;strong&gt;预览区&lt;/strong&gt; 的顶部放置了如下所示的 &lt;strong&gt;管理工具栏&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/toolbar-manager.jpg&#34; alt=&#34;tool-manager&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通过管理工具栏可以：&lt;/p&gt;

&lt;p&gt;&lt;i class=&#34;icon-share&#34;&gt;&lt;/i&gt; 发布：将当前的文稿生成固定链接，在网络上发布，分享
&lt;i class=&#34;icon-file&#34;&gt;&lt;/i&gt; 新建：开始撰写一篇新的文稿
&lt;i class=&#34;icon-trash&#34;&gt;&lt;/i&gt; 删除：删除当前的文稿
&lt;i class=&#34;icon-cloud&#34;&gt;&lt;/i&gt; 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地
&lt;i class=&#34;icon-reorder&#34;&gt;&lt;/i&gt; 列表：所有新增和过往的文稿都可以在这里查看、操作
&lt;i class=&#34;icon-pencil&#34;&gt;&lt;/i&gt; 模式：切换 普通/Vim/Emacs 编辑模式&lt;/p&gt;

&lt;h3 id=&#34;7-阅读工具栏:d52b76c9c6c9729538c3e898300f4780&#34;&gt;7. 阅读工具栏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/toolbar-reader.jpg&#34; alt=&#34;tool-manager&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通过 &lt;strong&gt;预览区&lt;/strong&gt; 右上角的 &lt;strong&gt;阅读工具栏&lt;/strong&gt;，可以查看当前文稿的目录并增强阅读体验。&lt;/p&gt;

&lt;p&gt;工具栏上的五个图标依次为：&lt;/p&gt;

&lt;p&gt;&lt;i class=&#34;icon-list&#34;&gt;&lt;/i&gt; 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落
&lt;i class=&#34;icon-chevron-sign-left&#34;&gt;&lt;/i&gt; 视图：互换左边编辑区和右边预览区的位置
&lt;i class=&#34;icon-adjust&#34;&gt;&lt;/i&gt; 主题：内置了黑白两种模式的主题，试试 &lt;strong&gt;黑色主题&lt;/strong&gt;，超炫！
&lt;i class=&#34;icon-desktop&#34;&gt;&lt;/i&gt; 阅读：心无旁骛的阅读模式提供超一流的阅读体验
&lt;i class=&#34;icon-fullscreen&#34;&gt;&lt;/i&gt; 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境&lt;/p&gt;

&lt;h3 id=&#34;8-阅读模式:d52b76c9c6c9729538c3e898300f4780&#34;&gt;8. 阅读模式&lt;/h3&gt;

&lt;p&gt;在 &lt;strong&gt;阅读工具栏&lt;/strong&gt; 点击 &lt;i class=&#34;icon-desktop&#34;&gt;&lt;/i&gt; 或者按下 &lt;code&gt;Ctrl+Alt+M&lt;/code&gt; 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。&lt;/p&gt;

&lt;h3 id=&#34;9-标签-分类和搜索:d52b76c9c6c9729538c3e898300f4780&#34;&gt;9. 标签、分类和搜索&lt;/h3&gt;

&lt;p&gt;在编辑区任意行首位置输入以下格式的文字可以标签当前文档：&lt;/p&gt;

&lt;p&gt;标签： 未分类&lt;/p&gt;

&lt;p&gt;标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.zybuluo.com/static/img/file-list.png&#34; alt=&#34;file-list&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;10-文稿发布和分享:d52b76c9c6c9729538c3e898300f4780&#34;&gt;10. 文稿发布和分享&lt;/h3&gt;

&lt;p&gt;在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 &lt;i class=&#34;icon-share&#34;&gt;&lt;/i&gt; (Ctrl+Alt+P) 发布这份文档给好友吧！&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;再一次感谢您花费时间阅读这份欢迎稿，点击 &lt;i class=&#34;icon-file&#34;&gt;&lt;/i&gt; (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！&lt;/p&gt;

&lt;p&gt;作者 &lt;a href=&#34;http://weibo.com/ghosert&#34;&gt;@ghosert&lt;/a&gt;
2015 年 06月 15日&lt;/p&gt;

&lt;p&gt;[4]: &lt;a href=&#34;http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference&#34;&gt;http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:d52b76c9c6c9729538c3e898300f4780:LaTeX&#34;&gt;支持 &lt;strong&gt;LaTeX&lt;/strong&gt; 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 [MathJax][4] 参考更多使用方法。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d52b76c9c6c9729538c3e898300f4780:LaTeX&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:d52b76c9c6c9729538c3e898300f4780:code&#34;&gt;代码高亮功能支持包括 Java, Python, JavaScript 在内的，&lt;strong&gt;四十一&lt;/strong&gt;种主流编程语言。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d52b76c9c6c9729538c3e898300f4780:code&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>深入理解Javascript类的创建和继承</title>
      <link>http://dxy-developer.github.io/f2e/post/rollup/</link>
      <pubDate>Thu, 14 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://dxy-developer.github.io/f2e/post/rollup/</guid>
      <description>

&lt;p&gt;最近看到挺多次 Rollup 这个词，再也架不住好奇，简单的学习实践了一下。&lt;a href=&#34;https://github.com/jyu213/rollup-demo&#34;&gt;完整项目库地址请戳&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;PS: ES6 对应 ES2015，请忽略这些细节。&lt;/p&gt;

&lt;h3 id=&#34;什么是-rollup:e603445b3dac0c53c95b4ffebaefde64&#34;&gt;什么是 Rollup&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rollup/rollup&#34;&gt;Rollup Github 地址&lt;/a&gt;。根据官网的解释，Rollup 是下一代 ES6 模块化工具。ES6 之后，模块化的写法将更加的趋势化，我们会将以前的文件切割成多个的细小模块。那么如何来高效的组织管理这些文件，又有了很多不同的方案。现有的模块化打包已经有如
&lt;code&gt;Browserify&lt;/code&gt; 和 &lt;code&gt;Webpack&lt;/code&gt; ，那为啥还需要一个新的呢？&lt;/p&gt;

&lt;h3 id=&#34;优势在哪:e603445b3dac0c53c95b4ffebaefde64&#34;&gt;优势在哪&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;可以生成 AMD，CMD，UMD 甚至 ES6 模块文件。&lt;/li&gt;
&lt;li&gt;Tree-shaking&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;tree-shaking&lt;/code&gt;(有知道中文怎么翻译的同学欢迎留言告知一下)，大致意思就是打包的时候会移除未使用到的 ES6 &lt;code&gt;exports&lt;/code&gt;模块。想要更深入的了解 &lt;code&gt;tree-shaking&lt;/code&gt; 的话，可以看下博士的这篇文章&lt;a href=&#34;http://www.2ality.com/2015/12/webpack-tree-shaking.html&#34;&gt;Tree-shaking with webpack 2 and Babel 6&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;话题转回来，Rollup 正是使用了 ES6 的模块特性，所以会使打包后的文件体积更小。如果是 CommonJS 的则需要先通过插件转为 ES6 后处理。&lt;/p&gt;

&lt;p&gt;对了，值得多说一句的是，Rollup 打包后的代码没有 &lt;code&gt;require&lt;/code&gt;，&lt;code&gt;import&lt;/code&gt;的，而是直接插入到文件中。&lt;/p&gt;

&lt;h3 id=&#34;如何引用:e603445b3dac0c53c95b4ffebaefde64&#34;&gt;如何引用&lt;/h3&gt;

&lt;p&gt;Rollup 支持 CLI 和 JS API 方式，同时提供了一些插件如解决压缩 babel 转换等问题。(PS: 此处讲解采用 API 的方式)&lt;/p&gt;

&lt;p&gt;首先在项目根目录创建 &lt;code&gt;rollup.js&lt;/code&gt; 文件，安装 &lt;code&gt;npm&lt;/code&gt; 的相关依赖&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var rollup = require(&#39;rollup&#39;);
var babel = require(&#39;rollup-plugin-babel&#39;);
var uglify = require(&#39;rollup-plugin-uglify&#39;);

rollup.rollup({
    entry: &#39;src/index.js&#39;,
    plugins: [
        babel({
            exclude: &#39;node_modules/**&#39;,
            presets: [ &amp;quot;es2015-rollup&amp;quot; ]
        }),
        uglify()
    ]
}).then(function(bundle) {
    bundle.write({
        // output format - &#39;amd&#39;, &#39;cjs&#39;, &#39;es6&#39;, &#39;iife&#39;, &#39;umd&#39;
        format: &#39;umd&#39;,
        moduleName: &#39;dqSystem&#39;,
        sourceMap: true,
        dest: &#39;dqSystem.js&#39;
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;rollup&lt;/code&gt; 方法可以配置一些入口文件，依赖插件等，返回的是 &lt;code&gt;bundle&lt;/code&gt; 的 &lt;code&gt;Promise&lt;/code&gt; 方法。&lt;code&gt;bundle&lt;/code&gt; 方法中可以配置文件相关参数，同时也可以生成多份版本文件。具体的 API &lt;a href=&#34;https://github.com/rollup/rollup/wiki/JavaScript-API&#34;&gt;参考官网&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;node rollup.js&lt;/code&gt; 执行打包。另外 Rollup 好像还不支持 &lt;code&gt;watch&lt;/code&gt; 的配置，我采用了 npm-watch 的方式跳过了。&lt;/p&gt;

&lt;h3 id=&#34;采过的坑:e603445b3dac0c53c95b4ffebaefde64&#34;&gt;采过的坑&lt;/h3&gt;

&lt;p&gt;试用时间不长，且内容比较简单，可能没碰到一些奇怪的点&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rollup.js 中可以 &lt;code&gt;catch&lt;/code&gt; 下 &lt;code&gt;error&lt;/code&gt; 方便调试错误&lt;/li&gt;
&lt;li&gt;UMD/IIFE 模式中需要&lt;code&gt;moduleName&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Rollup 的模块引用只支持 ES6 Module，其他的需要采用 &lt;code&gt;npm&lt;/code&gt; 和 &lt;code&gt;commonjs&lt;/code&gt; 的插件去解决&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;自己yy下:e603445b3dac0c53c95b4ffebaefde64&#34;&gt;自己YY下&lt;/h3&gt;

&lt;p&gt;不知道拿 Rollup 和 webpack 相比合不合适。我个人还是挺喜欢 webpack 的打包方式的，关键是功能强大，不过相比，配置也巨复杂。而 Rollup 的配置就简单很多了。实验的项目文件不大，所以没看出来两者在压缩体积上是否有明显的差异。Rollup 的&lt;code&gt;tree-shaking&lt;/code&gt;也将会在 webpack2 中支持。所以好像并没有什么一定非它不可的感觉。&lt;/p&gt;

&lt;p&gt;套用朋友说的一句话，“任何产品的生命周期都得看社区的活跃程度”。从 github 的 fock 人数上，还是持有很大的保留意见的，所有我个人可能会在一些小型或者快速项目中做尝试而已。&lt;/p&gt;

&lt;h3 id=&#34;参考文章:e603445b3dac0c53c95b4ffebaefde64&#34;&gt;参考文章&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rollup/rollup&#34;&gt;Rollup Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.2ality.com/2015/12/webpack-tree-shaking.html&#34;&gt;Tree-shaking with webpack 2 and Babel 6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ES6 - 解构赋值</title>
      <link>http://dxy-developer.github.io/f2e/article/es6-destructuring/</link>
      <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://dxy-developer.github.io/f2e/article/es6-destructuring/</guid>
      <description>

&lt;p&gt;在解释什么是解构赋值前，我们先来看一下， ES5 中对变量的声明和赋值。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var str = &#39;hello word&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;左边一个变量名，右边可以是字符串，数组或对象。&lt;/p&gt;

&lt;p&gt;ES6 中增加了一种更为便捷的赋值方式。称为 &lt;strong&gt;Destructuring&lt;/strong&gt; 。好像大家普遍翻译为解构。解构赋值允许我们将数组或对象的属性赋予给任何变量，该变量的定义语法与数组字面量或对象字面量很相似。举个例子可以直观的说明。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let [speak, name] = [&#39;hello&#39;, &#39;destructuring&#39;];
console.log( speak + &#39; &#39; + name ); // hello destructuring
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;数组的解构赋值:e302e6c8f79de556a21c4ad066a4fea9&#34;&gt;数组的解构赋值&lt;/h3&gt;

&lt;p&gt;用更加直白的话来描述就是，等号两边保持相同的形式（数组对应数组，对象对应对象），则左边的变量就会被赋予对应的值。如果对应的右边值缺失，缺失部分变量值为 &lt;code&gt;undefined&lt;/code&gt; ,如果右边值多余，依旧能够正常解构。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// ES6 中
let arr = [1,2,3,4,5];
let [el1, el2] = [arr];
// 或者
let [el1, el2] = [1,2,3,4,5];
// el1 =&amp;gt; 1, el2 =&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解构赋值也是可嵌套的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let value = [1, 2, [3, 4, 5]];
let [el1, el2, [el3, el4]] = value;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样可以通过简单地在指定位置省略变量来忽略数组中的某个元素：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let value = [1, 2, 3, 4, 5];
let [el1, , el3, , el5] = value;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更进一步，默认值同样也可以被指定：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let [firstName = &amp;quot;John&amp;quot;, lastName = &amp;quot;Doe&amp;quot;] = [];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ES6中，提供了一种将右侧多余的值以数组的形式赋值给左侧变量的语法——“rest“模式：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let [head, ...tail] = [1, 2, 3, 4];
console.log(tail);  // [2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当默认值不存在，变量值就等于 &lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let [missing] = [];
console.log(missing);  // undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的数组，指的是部署了 &lt;code&gt;[Iterator](http://www.2ality.com/2015/02/es6-iteration.html)&lt;/code&gt; 接口的数据结构。&lt;/p&gt;

&lt;h3 id=&#34;对象的解构赋值:e302e6c8f79de556a21c4ad066a4fea9&#34;&gt;对象的解构赋值&lt;/h3&gt;

&lt;p&gt;和数组的用法相类似，一个主要的不同点是，对象是无次序排列的，所以变量必须和属性名相同。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let person = {firstName: &amp;quot;John&amp;quot;, lastName: &amp;quot;Doe&amp;quot;};
let {firstName, lastName} = person;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解构另一个特性是，变量 keys 可以使用&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names&#34;&gt;计算后的属性名&lt;/a&gt;，但是如果你对这容易混淆的话，不建议使用。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let person = {firstName: &amp;quot;John&amp;quot;, lastName: &amp;quot;Doe&amp;quot;};
let {firstName: name, lastName} = person;
// `name`变量将会被声明为 `person.firstName` 的值
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;函数参数的解构赋值:e302e6c8f79de556a21c4ad066a4fea9&#34;&gt;函数参数的解构赋值&lt;/h3&gt;

&lt;p&gt;函数的参数也可以解构赋值。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function add({x: 0, y: 0}){
    return x+y;
}
add({1,2}); // 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;null-和-undefined:e302e6c8f79de556a21c4ad066a4fea9&#34;&gt;null 和 undefined&lt;/h3&gt;

&lt;p&gt;当尝试解构 &lt;code&gt;null&lt;/code&gt; 和 &lt;code&gt;undefined&lt;/code&gt; 的时候会报错。这是因为使用对象赋值模式时，被解构的值必需能够转换成一个对象（object）。大多数的类型都可以转换为一个对象，但null和undefined却并不能被转换。&lt;/p&gt;

&lt;h3 id=&#34;其它:e302e6c8f79de556a21c4ad066a4fea9&#34;&gt;其它&lt;/h3&gt;

&lt;p&gt;解构赋值的好处有很多，比如&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;两个值的交换&lt;/li&gt;
&lt;li&gt;函数参数默认值&lt;/li&gt;
&lt;li&gt;函数返回值&lt;/li&gt;
&lt;li&gt;正则匹配的返回值&lt;/li&gt;
&lt;li&gt;快速处理 JSON 数据&lt;/li&gt;
&lt;li&gt;遍历Map结构&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ES6 的解构赋值给 JS 的书写带来了很大的便利性，同时也提高了代码的可读性。但是也需要注意一些问题，避免适得其反。
* 关于圆括号的问题，欢迎翻看&lt;a href=&#34;http://es6.ruanyifeng.com/#docs/destructuring#圆括号问题&#34;&gt;阮一峰老师的博客&lt;/a&gt;
* 解构的嵌套尽量不要太深
* 函数有多个返回值时，尽量使用对象解构而不用数组解构，避免出现顺序对应问题
* 已声明过的变量不能用于解构&lt;/p&gt;

&lt;h3 id=&#34;浏览器支持:e302e6c8f79de556a21c4ad066a4fea9&#34;&gt;浏览器支持&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://kangax.github.io/compat-table/es6/#destructuring&#34;&gt;http://kangax.github.io/compat-table/es6/#destructuring&lt;/a&gt;
不完全统计：
* IE NO
* FF 38+ (大部分)
* CH/OP NO
* Webkit
* SF 9+, 8部分
* IOS8 部分&lt;/p&gt;

&lt;p&gt;PS: 整理的时候发现以前还保留着这样一份文章，无新，基本参考下述文章内容。仅供学习。&lt;/p&gt;

&lt;h3 id=&#34;参考文章:e302e6c8f79de556a21c4ad066a4fea9&#34;&gt;参考文章&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://es6.ruanyifeng.com/#docs/destructuring&#34;&gt;变量的解构赋值 - 阮一峰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hacks.mozilla.org/2015/05/es6-in-depth-destructuring/&#34;&gt;ES6 In Depth: Destructuring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://strongloop.com/strongblog/getting-started-with-javascript-es6-destructuring/&#34;&gt;Getting Started with JavaScript ES6 Destructuring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Gulp/Grunt/WebPack 你最喜欢哪个</title>
      <link>http://dxy-developer.github.io/f2e/article/es6-string/</link>
      <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://dxy-developer.github.io/f2e/article/es6-string/</guid>
      <description>

&lt;h2 id=&#34;es6-字符串模板:788adb061bdfedb3e4613f98a331a370&#34;&gt;ES6 - 字符串模板&lt;/h2&gt;

&lt;h3 id=&#34;写在前面:788adb061bdfedb3e4613f98a331a370&#34;&gt;写在前面&lt;/h3&gt;

&lt;p&gt;关于 ES6, 也终于在 2015 年的 7 月 18 号尘埃落定了。虽然说各大浏览器还没有全面的支持，不过这并不妨碍我们一颗想要撸一把的心。在后端，可以使用 Node.js(0.12+)或 io.js, 前端的话，也可以使用&lt;a href=&#34;http://babeljs.io/&#34;&gt;Babel&lt;/a&gt; 或&lt;a href=&#34;https://github.com/google/traceur-compiler#what-is-traceur&#34;&gt;Traceur&lt;/a&gt; 进行语法预转义成 ES5使用 。&lt;/p&gt;

&lt;p&gt;关于该系列（不知道能不能成为一个系列，总是各种懒），会没有规律的挑选一些内容来学习。欢迎大家积极纠错，留言探讨。&lt;/p&gt;

&lt;h3 id=&#34;模板字符串-template-strings:788adb061bdfedb3e4613f98a331a370&#34;&gt;模板字符串(template strings)&lt;/h3&gt;

&lt;p&gt;ES6 中引进的一种新型的字符串字面量语法 - 模板字符串。书面上来解释，模板字符串是一种能在字符串文本中内嵌表示式的字符串字面量。简单来讲，就是增加了变量功能的字符串。&lt;/p&gt;

&lt;p&gt;先来看一下以前我们对字符串的使用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ```
    /**
     * Before ES6 字符串拼接
     */
    var name = &#39;丁香医生&#39;;
    var desc = &#39;丁香医生是面向大众的科普性健康类网站&#39;;
    var html = function(name, desc){
        var tpl = &#39;公司名：&#39; + name + &#39;\n&#39;+
                &#39;简介：&#39;+ desc;
        return tpl;
    }
    ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而现在：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ```
    var html = `公司名：${name}
        简介：${desc}`;
    ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;很简洁吧。&lt;/p&gt;

&lt;p&gt;引一段 MDN 对于模板字符串的定义：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    模板字符串使用反引号 (` `) 来代替普通字符串中的用双引号和单引号。模板字符串可以包含特定语法(${expression})的占位符。占位符中的表达式和周围的文本会一起传递给一个默认函数，该函数负责将所有的部分连接起来。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而占位符&lt;code&gt;${}&lt;/code&gt;，可以是任意的 js 表达式（函数或者运算），甚至是另一个模板字符串，会将其计算的结果作为字符串输出。如果模板中需要使用&lt;code&gt;$,{&lt;/code&gt;等字符串，则需要进行转义。&lt;/p&gt;

&lt;p&gt;看个例子就明白了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ```
    var x = 1;
    var y = 2;
    `${ x } + ${ y } = ${ x + y}`  // &amp;quot;1 + 2 = 3&amp;quot;
    ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不同于普通字符串，模板字符串还可以多行书写，模板字符串中所有的空格，新行，缩进都会原样的输出在生成的字符串中。&lt;/p&gt;

&lt;p&gt;而单纯的模板字符串还存在着很多的局限性。如：
* 不能自动转义特殊的字符串。（这样很容易引起注入攻击）
* 不能很好的和国际化库配合（即不会格式化特定语言的数字，日期，文字等）
* 没有内建循环语法，（甚至连条件语句都不支持， 只可以使用模板套构的方法）&lt;/p&gt;

&lt;h3 id=&#34;标签模板-tagged-template:788adb061bdfedb3e4613f98a331a370&#34;&gt;标签模板(tagged template)&lt;/h3&gt;

&lt;p&gt;为此，引出了标签模板的概念。标签模板则是在反引号前面引入一个标签（tag）。该标签是一个函数，用于处于定制化模板字符串后返回值。就拿上面对特殊字符串举例。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ```
    /**
     * HTML 标签转义
     * @param {Array.&amp;lt;DOMString&amp;gt;} templateData 字符串类型的tokens
     * @param {...} ..vals 表达式占位符的运算结果tokens
     *
     */
    function SaferHTML(templateData) {
      var s = templateData[0];
      for (var i = 1; i &amp;lt; arguments.length; i++) {
        var arg = String(arguments[i]);
        // Escape special characters in the substitution.
        s += arg.replace(/&amp;amp;/g, &amp;quot;&amp;amp;amp;&amp;quot;)
                .replace(/&amp;lt;/g, &amp;quot;&amp;amp;lt;&amp;quot;)
                .replace(/&amp;gt;/g, &amp;quot;&amp;amp;gt;&amp;quot;);
        // Don&#39;t escape special characters in the template.
        s += templateData[i];
      }
      return s;
    }
    // 调用
    var html = SaferHTML`&amp;lt;p&amp;gt;这是关于字符串模板的介绍&amp;lt;/p&amp;gt;`;
    ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;标签函数会接收多个参数。
* 第一个参数是包含了字符串字面量(即那些没有变量替换的值)的数组
* 后面的参数是已经替换后的变量值&lt;/p&gt;

&lt;p&gt;改一下例子1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ```
    var name = &#39;丁香医生&#39;;
    var desc = &#39;丁香医生是面向大众的科普性健康类网站&#39;;
    tag`公司名：${name}简介：${desc}`
    ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tag 的参数则分别为 [&amp;lsquo;公司名：&amp;rsquo;,&amp;lsquo;简介：&amp;rsquo;], &amp;lsquo;丁香医生&amp;rsquo;, &amp;lsquo;丁香医生是面向大众的科普性健康类网站&amp;rsquo;。&lt;/p&gt;

&lt;p&gt;有了此类方法，就大大的增加了控制的权利。如上面说的国际化库甚至循环语句。&lt;/p&gt;

&lt;h3 id=&#34;浏览器兼容性:788adb061bdfedb3e4613f98a331a370&#34;&gt;浏览器兼容性&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;服务器端， io.js 支持&lt;/li&gt;
&lt;li&gt;浏览器端， FF34+ , chrome 41+&lt;/li&gt;
&lt;li&gt;移动端 IOS 8, Android 4.4&lt;/li&gt;
&lt;li&gt;IE Tech Preview&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;扩展阅读:788adb061bdfedb3e4613f98a331a370&#34;&gt;扩展阅读&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://es6.ruanyifeng.com/#docs/string&#34;&gt;ECMAScript 6 入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/web/updates/2015/01/ES6-Template-Strings&#34;&gt;Getting Literal With ES6 Template Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.2ality.com/2015/01/template-strings-html.html&#34;&gt;HTML templating with ES6 template strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings&#34;&gt;模板字符串 - MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://segmentfault.com/a/1190000002950341&#34;&gt;ES6 Features系列：Template Strings &amp;amp; Tagged Template Strings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>